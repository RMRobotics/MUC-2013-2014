#pragma config(Sensor, S1,     brSensor,       sensorCOLORFULL)
#pragma config(Sensor, S2,     frSensor,       sensorCOLORFULL)
#pragma config(Sensor, S3,     flSensor,       sensorLightActive)
#pragma config(Sensor, S4,     blSensor,       sensorCOLORFULL)
#pragma config(Motor,  motorB,          leftMotor,     tmotorNXT, PIDControl, reversed, encoder)
#pragma config(Motor,  motorC,          rightMotor,    tmotorNXT, PIDControl, reversed, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

typedef struct{
	string frColor;
	string brColor;
	string flColor;
	string blColor;
} sensorVals;

void getSensorValues(sensorVals *state); //returns Black, Blue, Green, Yellow, Red, White, ???

task main(){
	sensorVals currentColor;
	memset(currentColor, 0, sizeof(currentColor));
  while(true){
    getSensorValues(currentColor);
    nxtDisplayCenteredTextLine(1, "Front Right %s", currentColor.frColor);
    nxtDisplayCenteredTextLine(2, "Front Left %s", currentColor.flColor);
    nxtDisplayCenteredTextLine(3, "Back Right %s", currentColor.brColor);
    nxtDisplayCenteredTextLine(4, "Back Left %s", currentColor.blColor);
  }
}

void getSensorValues(sensorVals *state) {
  state->flColor = SensorValue[flSensor];
  state->frColor = SensorValue[frSensor];
  state->blColor = SensorValue[blSensor];
  state->brColor = SensorValue[brSensor];
}
